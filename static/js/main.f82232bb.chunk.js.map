{"version":3,"sources":["World.js","Dashboard.js","Student.js","App.js","serviceWorker.js","index.js"],"names":["World","props","state","event","this","timerID","setInterval","tick","clearInterval","Math","random","React","Component","Dashboard","classes","student","className","Grid","container","justify","item","xs","Paper","paper","creditScore","accountBalance","yearlyTuitionRate","Button","variant","color","GridList","feed","cellHeight","cols","GridListTile","newsItem","Student","semesterTuitionRate","studentLoan","APR","SLIRate","val","useStyles","makeStyles","theme","display","gridTemplateColumns","gridGap","spacing","padding","textAlign","textWrap","palette","text","primary","marginBottom","divider","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f82232bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass World extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {event: props.event};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    var random = Math.random();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.event}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default World;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport World from \"./World\";\r\n\r\nclass Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {classes: props.classes, student: props.student};\r\n  }\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <Grid container justify=\"center\" className={this.state.classes.container}>\r\n          <Grid item xs>\r\n            <Paper className={`paper ${ this.state.classes.paper }`}>Credit Score: <p>{this.state.student.creditScore}</p></Paper>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Paper className={`paper ${ this.state.classes.paper }`}>Account Balance: <p>${this.state.student.accountBalance}</p></Paper>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Paper className={`paper ${ this.state.classes.paper }`}>Yearly Tuition Rate: <p>${this.state.student.yearlyTuitionRate}</p></Paper>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Paper className={`paper ${ this.state.classes.paper }`}>\r\n              Date:\r\n              <World event=\"test\"></World>\r\n              <Button variant=\"contained\" color=\"primary\">Next Month</Button>\r\n            </Paper>\r\n          </Grid>\r\n          <GridList className={this.state.classes.feed} cellHeight={160} cols={1}>\r\n            <GridListTile>\r\n            <Paper className={this.state.classes.newsItem}>\r\n              <h2>Hello</h2>\r\n              <p>Event Description</p>\r\n            </Paper>\r\n            </GridListTile>\r\n            <GridListTile>\r\n              <Paper className={this.state.classes.newsItem}>\r\n              <h2>Hello</h2>\r\n              <p>Event Description</p>\r\n              </Paper>\r\n            </GridListTile>\r\n          </GridList>\r\n        </Grid>\r\n      </div>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","class Student {\r\n  constructor() {\r\n    this.creditScore = 700;\r\n    this.accountBalance = 0;\r\n    this.semesterTuitionRate = 8500;\r\n    this.studentLoan = -8500;\r\n    this.APR = 0.05;\r\n    this.SLIRate = 0.01;\r\n  }\r\n  addMoney(val){\r\n    this.accountBalance += val;\r\n    if(this.accountBalance < 0){\r\n      this.creditScore -= 10;\r\n    }\r\n  }\r\n  payLoan(val){\r\n    this.studentLoan += val;\r\n    this.accountBalance -= val;\r\n  }\r\n  checkMonth(val){\r\n    if(val % 12 == 0){\r\n      //TODO: Add this later\r\n    }\r\n  }\r\n}\r\n\r\nexport default Student;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport Dashboard from \"./Dashboard\";\nimport Student from \"./Student\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(4, 1fr)',\n    gridGap: theme.spacing(3)\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    textWrap: 'noWrap',\n    color: theme.palette.text.primary,\n    marginBottom: theme.spacing(1)\n  },\n  divider: {\n    margin: theme.spacing(2, 0),\n  },\n  feed: {\n    textAlign: 'left'\n  },\n  newsItem: {\n    padding: theme.spacing(1)\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const student = new Student();\n  //const world = new World();\n  return (\n    <Dashboard classes={classes} student={student}></Dashboard>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}